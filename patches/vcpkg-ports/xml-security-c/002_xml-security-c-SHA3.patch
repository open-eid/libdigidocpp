diff -U3 -r xml-security-c-2.0.2.orig/xsec/dsig/DSIGConstants.cpp xml-security-c-2.0.2/xsec/dsig/DSIGConstants.cpp
--- xml-security-c-2.0.2.orig/xsec/dsig/DSIGConstants.cpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/dsig/DSIGConstants.cpp	2021-04-25 13:25:45.000000000 +0300
@@ -62,6 +62,7 @@
 
 const XMLCh * DSIGConstants::s_unicodeStrURISIGBASE;
 const XMLCh * DSIGConstants::s_unicodeStrURISIGBASEMORE;
+const XMLCh * DSIGConstants::s_unicodeStrURISIGBASEMORE2;
 const XMLCh * DSIGConstants::s_unicodeStrURISIGBASE11;
 
 const XMLCh * DSIGConstants::s_unicodeStrURIRawX509;
@@ -70,6 +71,10 @@
 const XMLCh * DSIGConstants::s_unicodeStrURISHA256;
 const XMLCh * DSIGConstants::s_unicodeStrURISHA384;
 const XMLCh * DSIGConstants::s_unicodeStrURISHA512;
+const XMLCh * DSIGConstants::s_unicodeStrURISHA3_224;
+const XMLCh * DSIGConstants::s_unicodeStrURISHA3_256;
+const XMLCh * DSIGConstants::s_unicodeStrURISHA3_384;
+const XMLCh * DSIGConstants::s_unicodeStrURISHA3_512;
 const XMLCh * DSIGConstants::s_unicodeStrURIMD5;		// Not recommended
 const XMLCh * DSIGConstants::s_unicodeStrURIBASE64;
 const XMLCh * DSIGConstants::s_unicodeStrURIXPATH;
@@ -164,6 +169,7 @@
 
 	s_unicodeStrURISIGBASE = XMLString::transcode(URI_ID_SIG_BASE);
 	s_unicodeStrURISIGBASEMORE = XMLString::transcode(URI_ID_SIG_BASEMORE);
+	s_unicodeStrURISIGBASEMORE2 = XMLString::transcode(URI_ID_SIG_BASEMORE2);
 	s_unicodeStrURISIGBASE11 = XMLString::transcode(URI_ID_SIG_BASE11);
 
 	s_unicodeStrURISHA1 = XMLString::transcode(URI_ID_SHA1);
@@ -171,6 +177,10 @@
 	s_unicodeStrURISHA256 = XMLString::transcode(URI_ID_SHA256);
 	s_unicodeStrURISHA384 = XMLString::transcode(URI_ID_SHA384);
 	s_unicodeStrURISHA512 = XMLString::transcode(URI_ID_SHA512);
+	s_unicodeStrURISHA3_224 = XMLString::transcode(URI_ID_SHA3_224);
+	s_unicodeStrURISHA3_256 = XMLString::transcode(URI_ID_SHA3_256);
+	s_unicodeStrURISHA3_384 = XMLString::transcode(URI_ID_SHA3_384);
+	s_unicodeStrURISHA3_512 = XMLString::transcode(URI_ID_SHA3_512);
 	s_unicodeStrURIMD5 = XMLString::transcode(URI_ID_MD5);
 	s_unicodeStrURIBASE64 = XMLString::transcode(URI_ID_BASE64);
 	s_unicodeStrURIXPATH = XMLString::transcode(URI_ID_XPATH);
@@ -262,6 +272,7 @@
 
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISIGBASE);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISIGBASEMORE);
+	XSEC_RELEASE_XMLCH(s_unicodeStrURISIGBASEMORE2);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISIGBASE11);
 
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA1);
@@ -269,6 +280,10 @@
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA256);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA384);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA512);
+	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA3_224);
+	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA3_256);
+	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA3_384);
+	XSEC_RELEASE_XMLCH(s_unicodeStrURISHA3_512);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURIMD5);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURIBASE64);
 	XSEC_RELEASE_XMLCH(s_unicodeStrURIXPATH);
diff -U3 -r xml-security-c-2.0.2.orig/xsec/dsig/DSIGConstants.hpp xml-security-c-2.0.2/xsec/dsig/DSIGConstants.hpp
--- xml-security-c-2.0.2.orig/xsec/dsig/DSIGConstants.hpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/dsig/DSIGConstants.hpp	2021-04-25 13:26:07.000000000 +0300
@@ -57,6 +57,10 @@
 #define URI_ID_SHA256       "http://www.w3.org/2001/04/xmlenc#sha256"
 #define URI_ID_SHA384       "http://www.w3.org/2001/04/xmldsig-more#sha384"
 #define URI_ID_SHA512       "http://www.w3.org/2001/04/xmlenc#sha512"
+#define URI_ID_SHA3_224     "http://www.w3.org/2007/05/xmldsig-more#sha3-224"
+#define URI_ID_SHA3_256     "http://www.w3.org/2007/05/xmldsig-more#sha3-256"
+#define URI_ID_SHA3_384     "http://www.w3.org/2007/05/xmldsig-more#sha3-384"
+#define URI_ID_SHA3_512     "http://www.w3.org/2007/05/xmldsig-more#sha3-512"
 
 // Encryption Algorithms
 #define URI_ID_3DES_CBC      "http://www.w3.org/2001/04/xmlenc#tripledes-cbc"
@@ -110,6 +114,7 @@
 
 #define URI_ID_SIG_BASE      "http://www.w3.org/2000/09/xmldsig#"
 #define URI_ID_SIG_BASEMORE  "http://www.w3.org/2001/04/xmldsig-more#"
+#define URI_ID_SIG_BASEMORE2 "http://www.w3.org/2007/05/xmldsig-more#"
 #define URI_ID_SIG_BASE11    "http://www.w3.org/2009/xmldsig11#"
 #define URI_ID_SIG_DSA       "dsa"
 #define URI_ID_SIG_ECDSA     "ecdsa"
@@ -186,6 +191,7 @@
 
     static const XMLCh * s_unicodeStrURISIGBASE;
     static const XMLCh * s_unicodeStrURISIGBASEMORE;
+    static const XMLCh * s_unicodeStrURISIGBASEMORE2;
     static const XMLCh * s_unicodeStrURISIGBASE11;
 
     static const XMLCh * s_unicodeStrURIRawX509;
@@ -194,6 +200,10 @@
     static const XMLCh * s_unicodeStrURISHA256;
     static const XMLCh * s_unicodeStrURISHA384;
     static const XMLCh * s_unicodeStrURISHA512;
+    static const XMLCh * s_unicodeStrURISHA3_224;
+    static const XMLCh * s_unicodeStrURISHA3_256;
+    static const XMLCh * s_unicodeStrURISHA3_384;
+    static const XMLCh * s_unicodeStrURISHA3_512;
     static const XMLCh * s_unicodeStrURIMD5;        // Not recommended
     static const XMLCh * s_unicodeStrURIBASE64;
     static const XMLCh * s_unicodeStrURIXPATH;
diff -U3 -r xml-security-c-2.0.2.orig/xsec/dsig/DSIGSignature.cpp xml-security-c-2.0.2/xsec/dsig/DSIGSignature.cpp
--- xml-security-c-2.0.2.orig/xsec/dsig/DSIGSignature.cpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/dsig/DSIGSignature.cpp	2021-04-25 12:20:42.000000000 +0300
@@ -108,6 +108,10 @@
     XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA256, def);
     XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA384, def);
     XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA512, def);
+    XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA3_224, def);
+    XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA3_256, def);
+    XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA3_384, def);
+    XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURISHA3_512, def);
     XSECPlatformUtils::registerAlgorithmHandler(DSIGConstants::s_unicodeStrURIMD5, def);
 
 }
diff -U3 -r xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp
--- xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp	2021-04-25 13:29:09.000000000 +0300
@@ -102,6 +102,46 @@
 
         break;
 
+    case (XSECCryptoHash::HASH_SHA3_224) :
+    
+        mp_md = EVP_get_digestbyname("SHA3-224");
+        if (mp_md == NULL) {
+            throw XSECCryptoException(XSECCryptoException::MDError,
+            "OpenSSL:Hash - SHA3-224 not supported by this version of OpenSSL"); 
+        }
+
+        break;
+
+    case (XSECCryptoHash::HASH_SHA3_256) :
+    
+        mp_md = EVP_get_digestbyname("SHA3-256");
+        if (mp_md == NULL) {
+            throw XSECCryptoException(XSECCryptoException::MDError,
+            "OpenSSL:Hash - SHA3-256 not supported by this version of OpenSSL"); 
+        }
+
+        break;
+
+    case (XSECCryptoHash::HASH_SHA3_384) :
+    
+        mp_md = EVP_get_digestbyname("SHA3-384");
+        if (mp_md == NULL) {
+            throw XSECCryptoException(XSECCryptoException::MDError,
+            "OpenSSL:Hash - SHA3-384 not supported by this version of OpenSSL"); 
+        }
+
+        break;
+
+    case (XSECCryptoHash::HASH_SHA3_512) :
+    
+        mp_md = EVP_get_digestbyname("SHA3-512");
+        if (mp_md == NULL) {
+            throw XSECCryptoException(XSECCryptoException::MDError,
+            "OpenSSL:Hash - SHA3-512 not supported by this version of OpenSSL"); 
+        }
+
+        break;
+
     default :
 
         mp_md = NULL;
diff -U3 -r xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp
--- xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp	2018-10-11 18:13:40.000000000 +0300
+++ xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp	2021-04-25 12:32:28.000000000 +0300
@@ -281,6 +281,18 @@
         case XSECCryptoHash::HASH_SHA512:
             evp_md = EVP_get_digestbyname("SHA512");
             break;
+        case XSECCryptoHash::HASH_SHA3_224:
+            evp_md = EVP_get_digestbyname("SHA3-224");
+            break;
+        case XSECCryptoHash::HASH_SHA3_256:
+            evp_md = EVP_get_digestbyname("SHA3-256");
+            break;
+        case XSECCryptoHash::HASH_SHA3_384:
+            evp_md = EVP_get_digestbyname("SHA3-384");
+            break;
+        case XSECCryptoHash::HASH_SHA3_512:
+            evp_md = EVP_get_digestbyname("SHA3-512");
+            break;
 
         default:
             ;
diff -U3 -r xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp
--- xml-security-c-2.0.2.orig/xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp	2021-04-25 12:30:22.000000000 +0300
@@ -364,6 +364,22 @@
         return false;
 #endif
 
+    case (XSECCryptoHash::HASH_SHA3_224) :
+    case (XSECCryptoHash::HASH_SHA3_256) :
+#if defined(XSEC_OPENSSL_HAVE_SHA2) && !defined(OPENSSL_NO_SHA256)
+        return true;
+#else
+        return false;
+#endif
+
+    case (XSECCryptoHash::HASH_SHA3_384) :
+    case (XSECCryptoHash::HASH_SHA3_512) :
+#if defined(XSEC_OPENSSL_HAVE_SHA2) && !defined(OPENSSL_NO_SHA512)
+        return true;
+#else
+        return false;
+#endif
+
     default:
         return false;
     }
diff -U3 -r xml-security-c-2.0.2.orig/xsec/enc/XSECCryptoHash.hpp xml-security-c-2.0.2/xsec/enc/XSECCryptoHash.hpp
--- xml-security-c-2.0.2.orig/xsec/enc/XSECCryptoHash.hpp	2018-06-18 17:48:29.000000000 +0300
+++ xml-security-c-2.0.2/xsec/enc/XSECCryptoHash.hpp	2021-04-25 12:28:27.000000000 +0300
@@ -76,7 +76,11 @@
         HASH_SHA224            = 3,
         HASH_SHA256            = 4,
         HASH_SHA384            = 5,
-        HASH_SHA512            = 6
+        HASH_SHA512            = 6,
+        HASH_SHA3_224            = 7,
+        HASH_SHA3_256            = 8,
+        HASH_SHA3_384            = 9,
+        HASH_SHA3_512            = 10
     };
 
     // Constructors/Destructors
diff -U3 -r xml-security-c-2.0.2.orig/xsec/tools/xtest/xtest.cpp xml-security-c-2.0.2/xsec/tools/xtest/xtest.cpp
--- xml-security-c-2.0.2.orig/xsec/tools/xtest/xtest.cpp	2018-06-18 17:48:28.000000000 +0300
+++ xml-security-c-2.0.2/xsec/tools/xtest/xtest.cpp	2021-04-25 12:24:26.000000000 +0300
@@ -796,7 +796,7 @@
 		XSECProvider prov;
 		DSIGSignature *sig;
 		DOMElement *sigNode;
-		DSIGReference *ref[4];
+		DSIGReference *ref[8];
 		
 		sig = prov.newSignature();
 		sig->setDSIGNSPrefix(MAKE_UNICODE_STRING("ds"));
@@ -853,6 +853,42 @@
             ref[3] = NULL;
         }
 
+        if (XSECPlatformUtils::g_cryptoProvider->algorithmSupported(XSECCryptoHash::HASH_SHA3_224)) {
+            cerr << "3-224 ... ";
+            ref[4] = sig->createReference(MAKE_UNICODE_STRING("#ObjectId"),
+                DSIGConstants::s_unicodeStrURISHA3_224);
+        }
+        else {
+            ref[4] = NULL;
+        }
+
+        if (XSECPlatformUtils::g_cryptoProvider->algorithmSupported(XSECCryptoHash::HASH_SHA3_256)) {
+            cerr << "3-256 ... ";
+            ref[5] = sig->createReference(MAKE_UNICODE_STRING("#ObjectId"),
+                DSIGConstants::s_unicodeStrURISHA3_256);
+        }
+        else {
+            ref[5] = NULL;
+        }
+
+        if (XSECPlatformUtils::g_cryptoProvider->algorithmSupported(XSECCryptoHash::HASH_SHA3_384)) {
+            cerr << "3-384 ... ";
+            ref[6] = sig->createReference(MAKE_UNICODE_STRING("#ObjectId"),
+                DSIGConstants::s_unicodeStrURISHA3_384);
+        }
+        else {
+            ref[6] = NULL;
+        }
+
+        if (XSECPlatformUtils::g_cryptoProvider->algorithmSupported(XSECCryptoHash::HASH_SHA3_512)) {
+            cerr << "3-512 ... ";
+            ref[7] = sig->createReference(MAKE_UNICODE_STRING("#ObjectId"),
+                DSIGConstants::s_unicodeStrURISHA3_512);
+        }
+        else {
+            ref[7] = NULL;
+        }
+
 		// Get a key
 		cerr << "signing ... ";
 
@@ -909,6 +945,10 @@
 			"SHA256",
 			"SHA384",
 			"SHA512"
+			"SHA3-224",
+			"SHA3-256",
+			"SHA3-384",
+			"SHA3-512"
 		};
 
 		/*
@@ -916,7 +956,7 @@
 		 */
 
 		int i;
-		for (i = 0; i < 4; ++i) {
+		for (i = 0; i < 8; ++i) {
 		    if (ref[i] == NULL) {
 		        continue;
 		    }
diff -U3 -r xml-security-c-2.0.2.orig/xsec/utils/XSECAlgorithmSupport.cpp xml-security-c-2.0.2/xsec/utils/XSECAlgorithmSupport.cpp
--- xml-security-c-2.0.2.orig/xsec/utils/XSECAlgorithmSupport.cpp	2018-06-18 17:48:28.000000000 +0300
+++ xml-security-c-2.0.2/xsec/utils/XSECAlgorithmSupport.cpp	2021-04-25 13:26:47.000000000 +0300
@@ -130,6 +130,58 @@
     chNull
 };
 
+static XMLCh s_sha3_224[] = {
+
+    chLatin_s,
+    chLatin_h,
+    chLatin_a,
+    chDigit_3,
+    chDash,
+    chDigit_2,
+    chDigit_2,
+    chDigit_4,
+    chNull
+};
+
+static XMLCh s_sha3_256[] = {
+
+    chLatin_s,
+    chLatin_h,
+    chLatin_a,
+    chDigit_3,
+    chDash,
+    chDigit_2,
+    chDigit_5,
+    chDigit_6,
+    chNull
+};
+
+static XMLCh s_sha3_384[] = {
+
+    chLatin_s,
+    chLatin_h,
+    chLatin_a,
+    chDigit_3,
+    chDash,
+    chDigit_3,
+    chDigit_8,
+    chDigit_4,
+    chNull
+};
+
+static XMLCh s_sha3_512[] = {
+
+    chLatin_s,
+    chLatin_h,
+    chLatin_a,
+    chDigit_3,
+    chDash,
+    chDigit_5,
+    chDigit_1,
+    chDigit_2,
+    chNull
+};
+
 static XMLCh s_md5[] = {
 
     chLatin_m,
@@ -174,6 +226,26 @@
         return true;
     }
 
+    if (XMLString::equals(URI, s_sha3_224)) {
+        type = XSECCryptoHash::HASH_SHA3_224;
+        return true;
+    }
+
+    if (XMLString::equals(URI, s_sha3_256)) {
+        type = XSECCryptoHash::HASH_SHA3_256;
+        return true;
+    }
+
+    if (XMLString::equals(URI, s_sha3_384)) {
+        type = XSECCryptoHash::HASH_SHA3_384;
+        return true;
+    }
+
+    if (XMLString::equals(URI, s_sha3_512)) {
+        type = XSECCryptoHash::HASH_SHA3_512;
+        return true;
+    }
+
     type = XSECCryptoHash::HASH_NONE;
     return false;
 }
@@ -185,6 +257,7 @@
     // Check this is a known prefix on the URI.
     XMLSize_t blen = XMLString::stringLen(DSIGConstants::s_unicodeStrURISIGBASE);
     XMLSize_t bmlen = XMLString::stringLen(DSIGConstants::s_unicodeStrURISIGBASEMORE);
+    XMLSize_t bmlen2 = XMLString::stringLen(DSIGConstants::s_unicodeStrURISIGBASEMORE);
     XMLSize_t belen = XMLString::stringLen(DSIGConstants::s_unicodeStrURIXENC);
     if (XMLString::compareNString(uri, DSIGConstants::s_unicodeStrURISIGBASE, blen) == 0) {
 
@@ -196,6 +269,10 @@
 
         ::getHashType(&uri[bmlen], type);
     }
+    else if (XMLString::compareNString(uri, DSIGConstants::s_unicodeStrURISIGBASEMORE2, bmlen2) == 0) {
+
+        ::getHashType(&uri[bmlen2], type);
+    }
     else if (XMLString::compareNString(uri, DSIGConstants::s_unicodeStrURIXENC, belen) == 0) {
 
         ::getHashType(&uri[belen], type);
