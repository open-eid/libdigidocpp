name: CI
on: [push, pull_request]
env:
  RUN_TESTS: ALL
  BUILD_NUMBER: ${{ github.run_number }}
  MAKEFLAGS: -j3
jobs:
  macos:
    name: Build on macOS for ${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      matrix:
        target: [osx, ios, iossimulator, androidarm, androidarm64, androidx86, androidx86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: |
        brew update
        brew install swig doxygen boost xsd || brew link --overwrite xsd
        brew unlink xerces-c
    - name: Cache
      uses: actions/cache@v2
      id: cache
      with:
        path: cache
        key: ${{ matrix.target }}-${{ hashFiles('prepare_osx_build_environment.sh') }}
    - name: For now remove CommandLineTools to fix build with macOS arm64
      run: sudo rm -rf /Library/Developer/CommandLineTools
    - name: Build xerces-c
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./prepare_osx_build_environment.sh xerces ${{ matrix.target }}
    - name: Build xalan-c
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./prepare_osx_build_environment.sh xalan ${{ matrix.target }}
    - name: Build openssl
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./prepare_osx_build_environment.sh openssl ${{ matrix.target }}
    - name: Build xml-security-c
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./prepare_osx_build_environment.sh xmlsec ${{ matrix.target }}
    - name: Move to cache
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        mkdir cache
        sudo mv /Library/libdigidocpp* cache
    - name: Setup cache
      run: sudo ln -s $PWD/cache/* /Library/
    - name: Build macOS
      if: matrix.target == 'osx'
      run: ./build-library.sh all pkcs11sign zipdebug embedlibs pkgbuild
    - name: Build ${{ matrix.target }}
      if: matrix.target != 'osx'
      run: ./build-library.sh ${{ matrix.target }} install/strip
    - name: Archive artifacts
      if: matrix.target == 'osx'
      uses: actions/upload-artifact@v2
      with:
        name: pkgs
        path: macOS/libdigidocpp*.*
  ubuntu:
    name: Build on Ubuntu to ${{ matrix.container }}
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        container: ['ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:20.10', 'ubuntu:21.04']
    env:
      DEBIAN_FRONTEND: noninteractive
      DEBFULLNAME: 'github-actions'
      DEBEMAIL: 'github-actions@github.com'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Add open-eid repo
      if: matrix.container == 'ubuntu:18.04'
      run: |
        apt update -qq && apt install --no-install-recommends -y curl ca-certificates gnupg2 lsb-release
        curl https://installer.id.ee/media/install-scripts/C6C83D68.pub | gpg --dearmor | tee /etc/apt/trusted.gpg.d/ria-repository.gpg > /dev/null
        echo "deb https://installer.id.ee/media/ubuntu/ $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ria-repository.list
    - name: Install dependencies
      run: apt update -qq && apt install --no-install-recommends -y lsb-release dh-make fakeroot build-essential devscripts cdbs cmake vim-common xsdcxx libxml-security-c-dev zlib1g-dev doxygen swig openjdk-8-jdk-headless libboost-test-dev lintian
    - name: Setup changelog
      run: |
        export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}")
        export VERSIONEX=${VERSION}.${BUILD_NUMBER}.$(lsb_release -rs)
        dh_make --createorig --addmissing --defaultless -y -p libdigidocpp_${VERSIONEX}
        dch --distribution $(lsb_release -cs) -v ${VERSIONEX} "Release ${VERSIONEX}."
    - name: Build packages
      run: |
        dpkg-buildpackage -rfakeroot -us -uc
        mv ../libdigidocpp*.* .
    - name: Lintian
      run: lintian *.deb;
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: debs
        path: libdigidocpp*.*
  windows:
    name: Build on Windows
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        image: ['windows-2019', 'windows-2016']
        include:
        - image: 'windows-2019'
          toolset: '142'
          vcvars: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat"
        - image: 'windows-2016'
          toolset: '141'
          vcvars: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat"
    env:
      MAKEFLAGS: ""
      VER_SUFFIX: ".VS${{ matrix.toolset }}"
      VERSION: "3.14.7.${{ github.run_number }}"
      VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/patches/vcpkg-triplets"
      VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/patches/vcpkg-ports"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Prepare vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgArguments: >-
          "xml-security-c:x86-windows-v${{ matrix.toolset }}"
          "xml-security-c:x64-windows-v${{ matrix.toolset }}"
          "zlib:x86-windows-v${{ matrix.toolset }}"
          "zlib:x64-windows-v${{ matrix.toolset }}"
          "boost-test:x86-windows-v${{ matrix.toolset }}"
          "boost-test:x64-windows-v${{ matrix.toolset }}"
        vcpkgGitCommitId: 772d435ba18bf2f342458e0187ab7b48b84fe3f0
    - name: Install dependencies
      run: choco install doxygen.install swig -y > $null
    - name: Build xsd
      run: .\prepare_win_build_environment.ps1 -xsd
    - name: Build
      run: |
        & .\build.ps1 `
          -msiversion $env:VERSION `
          -toolset ${{ matrix.toolset }} `
          -vcvars "${{ matrix.vcvars }}" `
         -swig C:/ProgramData/chocolatey/bin/swig.exe `
         -doxygen "C:/Program files/doxygen/bin/doxygen.exe"
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: msi
        path: ./*.msi
  pages:
    name: Deploy pages
    if: contains(github.repository, 'open-eid/libdigidocpp') && contains(github.ref, 'master')
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update -qq && sudo apt install --no-install-recommends -y cmake vim-common xsdcxx libxml-security-c-dev zlib1g-dev doxygen
    - name: Build docs
      run: |
        mkdir build
        cd build
        cmake ..
        make docs
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/doc
        force_orphan: true
  coverity:
    name: Run Coverity tests
    if: contains(github.repository, 'open-eid/libdigidocpp') && contains(github.ref, 'coverity_scan')
    runs-on: ubuntu-20.04
    env:
      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      PROJECTNAME: 'open-eid/libdigidocpp'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update -qq && sudo apt install --no-install-recommends -y cmake vim-common xsdcxx libxml-security-c-dev zlib1g-dev curl ca-certificates
    - name: Download Coverity Build Tool
      run: |
        curl --silent --data "token=$TOKEN&project=$PROJECTNAME" -o cov-analysis-linux64.tar.gz https://scan.coverity.com/download/cxx/linux64
        mkdir cov-analysis-linux64
        tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
    - name: Build
      run: |
        cmake .
        export PATH=$PWD/cov-analysis-linux64/bin:$PATH
        cov-build --dir cov-int make
    - name: Submit the result to Coverity Scan
      run: |
        tar czvf upload.tgz cov-int
        curl --silent \
          --form project=$PROJECTNAME \
          --form token=$TOKEN \
          --form email=eid-teenusehaldus@ria.ee \
          --form file=@upload.tgz \
          --form version=master \
          --form description="Github Actions CI build" \
          https://scan.coverity.com/builds?project=$PROJECTNAME
  codeql:
    name: Run CodeQL tests
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update -qq && sudo apt install --no-install-recommends -y cmake vim-common xsdcxx libxml-security-c-dev zlib1g-dev
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
