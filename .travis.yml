language: c++
matrix:
  include:
  - os: linux
    env: TARGET=ubuntu:16.04
    sudo: false
  - os: linux
    env: TARGET=ubuntu:18.04
    sudo: false
  - os: linux
    env: TARGET=i386/ubuntu:16.04
    sudo: false
  - os: osx
    env: TARGET=osx
  - os: osx
    env: TARGET=ios ARCHS="armv7 arm64"
  - os: osx
    env: TARGET=simulator ARCHS="x86_64"
  - os: osx
    env: TARGET=androidarm
  - os: osx
    env: TARGET=androidarm64
  - os: osx
    env: TARGET=androidx86
sudo: required
dist: trusty
osx_image: xcode9.3
services:
- docker
cache: ccache
env:
  global:
  - BUILD_NUMBER=${TRAVIS_BUILD_NUMBER}
  - RUN_TESTS=ALL
  - PATH=${PATH}:$HOME/.local/bin:$HOME/Library/Python/2.7/bin;
  - AWS_DEFAULT_REGION=eu-west-1

before_install: if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    sudo easy_install pip;
    brew install swig;
    pip install --user awscli > /dev/null;
    HASH=($(shasum prepare_osx_build_environment.sh));
    aws s3 cp s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip ${HASH}.zip --no-sign-request;
    if [ $? -eq 0 ]; then
      sudo unzip -qq -d /Library ${HASH}.zip;
    else
      ./prepare_osx_build_environment.sh all ${TARGET};
      if [ ${AWS_ACCESS_KEY_ID:+1} ]; then
        cd /Library && zip -q -r $OLDPWD/${HASH}.zip libdigidocpp* && cd $OLDPWD;
        aws s3 cp ${HASH}.zip s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip --acl public-read;
      fi
    fi
  fi
script: case ${TARGET} in
  *ios*|*simulator*)
    cd examples/libdigidocpp-ios && ./build-library.sh ${TARGET} && cd ../..;
    ;;
  *android*)
    cd examples/libdigidocpp-android && ./build-library.sh ${TARGET} && cd ../..;
    sudo /Library/libdigidocpp.${TARGET}/bin/*strip -s /Library/libdigidocpp.${TARGET}/lib/*.so;
    ;;
  *osx*)
    mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=/Library/libdigidocpp -DOPENSSL_ROOT_DIR=/Library/libdigidocpp ..;
    make all pkcs11sign zipdebug embedlibs pkgbuild && cd ..;
    ;;
  *)
    docker run -e BUILD_NUMBER=${BUILD_NUMBER} -e RUN_TESTS=${RUN_TESTS} -e COVERITY_SCAN_TOKEN=${COVERITY_SCAN_TOKEN} -e TRAVIS_BRANCH=${TRAVIS_BRANCH} -e TARGET=${TARGET} -v ${HOME}:${HOME} -t "${TARGET}" /bin/bash -c "cd $(pwd);"'
      apt-get update -qq; 
      apt-get install -y dh-make devscripts cdbs cmake vim-common xsdcxx libxml-security-c-dev libminizip-dev doxygen swig openjdk-8-jdk-headless libboost-test-dev git curl wget ruby;
      export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}").${BUILD_NUMBER};
      export DEBFULLNAME="Travis";
      export DEBEMAIL="travis-ci@travis";
      dh_make --createorig --addmissing --defaultless -y -p libdigidocpp_${VERSION};
      dch --distribution $(lsb_release -cs) -v ${VERSION} "Release ${VERSION}.";
      dpkg-buildpackage -rfakeroot -us -uc;
      if [ "${TARGET}" = "ubuntu:16.04" ]; then
        export COVERITY_SCAN_PROJECT_NAME="open-eid/libdigidocpp";
        export COVERITY_SCAN_NOTIFICATION_EMAIL="raul@metsma.ee";
        export COVERITY_SCAN_BRANCH_PATTERN=coverity_scan;
        export COVERITY_SCAN_BUILD_COMMAND_PREPEND="cmake .";
        export COVERITY_SCAN_BUILD_COMMAND=make;
        wget -O - https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh | bash;
      fi;
      git clean -dxf';
  esac

before_deploy:
- export VERSION=${TRAVIS_TAG:1}
- cd ..
- mv libdigidocpp libdigidocpp-${VERSION}
- tar czf libdigidocpp-${VERSION}.tar.gz --exclude-vcs libdigidocpp-${VERSION}
deploy:
  provider: releases
  api_key: ${GITHUB_ACCESS_TOKEN}
  file: libdigidocpp-${VERSION}.tar.gz
  skip_cleanup: true
  on:
    tags: true
    condition: "$TRAVIS_OS_NAME = linux"
