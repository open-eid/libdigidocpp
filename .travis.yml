language: cpp
jobs:
  include:
  - os: linux
    env: TARGET=ubuntu:18.04
  - os: linux
    env: TARGET=ubuntu:20.04
  - os: linux
    env: TARGET=ubuntu:20.10
  - os: linux
    env: TARGET=i386/ubuntu:18.04
  - env: TARGET=osx
  - env: TARGET=ios
  - env: TARGET=iossimulator
  - env: TARGET=androidarm
  - env: TARGET=androidarm64
  - env: TARGET=androidx86
  - env: TARGET=androidx86_64
os: osx
dist: focal
osx_image: xcode12.2
services: [ docker ]
cache: ccache
env:
  global:
  - BUILD_NUMBER=${TRAVIS_BUILD_NUMBER}
  - RUN_TESTS=ALL
  - AWS_DEFAULT_REGION=eu-west-1
before_install: if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    brew install swig awscli doxygen xsd;
    brew unlink xerces-c;
    HASH=($(shasum prepare_osx_build_environment.sh));
    aws s3 cp s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip ${HASH}.zip --no-sign-request;
    if [ $? -eq 0 ]; then
      sudo unzip -qq -d /Library ${HASH}.zip;
    else
      ./prepare_osx_build_environment.sh xerces xalan openssl xmlsec ${TARGET};
      if [ ${AWS_ACCESS_KEY_ID:+1} ]; then
        cd /Library && zip -q -r $OLDPWD/${HASH}.zip libdigidocpp* && cd $OLDPWD;
        aws s3 cp ${HASH}.zip s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip --acl public-read;
      fi
    fi
  fi;
  mkdir ../upload
script: case ${TARGET} in
  *ios*|*simulator*|*android*)
    ./build-library.sh ${TARGET} install/strip;
    ;;
  *osx*)
    ./build-library.sh ${TARGET} all pkcs11sign zipdebug embedlibs pkgbuild;
    cp macOS/libdigidocpp*.pkg ../upload;
    ;;
  *)
    docker run -e BUILD_NUMBER=${BUILD_NUMBER} -e RUN_TESTS=${RUN_TESTS} -e COVERITY_SCAN_TOKEN=${COVERITY_SCAN_TOKEN} -e TRAVIS_BRANCH=${TRAVIS_BRANCH} -e TARGET=${TARGET} -v ${HOME}:${HOME} -t "${TARGET}" /bin/bash -c "cd $(pwd);"'
      set -e;
      apt-get update -qq; 
      export DEBIAN_FRONTEND=noninteractive;
      apt-get install -y dh-make devscripts cdbs cmake vim-common xsdcxx libxml-security-c-dev zlib1g-dev doxygen swig openjdk-8-jdk-headless libboost-test-dev git;
      export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}");
      export VERSIONEX=${VERSION}.${BUILD_NUMBER}.$(lsb_release -rs)
      export DEBFULLNAME="Travis";
      export DEBEMAIL="travis-ci@travis-ci.org";
      dh_make --createorig --addmissing --defaultless -y -p libdigidocpp_${VERSIONEX};
      dch --distribution $(lsb_release -cs) -v ${VERSIONEX} "Release ${VERSIONEX}.";
      dpkg-buildpackage -rfakeroot -us -uc;
      if [[ "${TARGET}" = "ubuntu:18.04" && "${TRAVIS_BRANCH}" = "coverity_scan" ]]; then
        apt-get install -y curl wget ruby;
        export COVERITY_SCAN_PROJECT_NAME="open-eid/libdigidocpp";
        export COVERITY_SCAN_NOTIFICATION_EMAIL="raul@metsma.ee";
        export COVERITY_SCAN_BRANCH_PATTERN=coverity_scan;
        export COVERITY_SCAN_BUILD_COMMAND_PREPEND="cmake .";
        export COVERITY_SCAN_BUILD_COMMAND=make;
        set +e;
        wget -O - https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh | bash;
        set -e;
      fi;
      lintian ../*.deb;
      git clean -dxf;
      cd ..;
      mv libdigidocpp libdigidocpp-${VERSION};
      tar czf libdigidocpp-${VERSION}.tar.gz --exclude-vcs libdigidocpp-${VERSION};
      mv libdigidocpp-${VERSION} libdigidocpp;
      cp libdigidocpp*.* upload';
  esac
deploy:
- provider: releases
  token: ${GITHUB_ACCESS_TOKEN}
  file: ../upload/libdigidocpp-${TRAVIS_TAG:1}.tar.gz
  on:
    tags: true
    repo: open-eid/libdigidocpp
    condition: $TARGET = "ubuntu:18.04"
- provider: pages
  token: ${GITHUB_ACCESS_TOKEN}
  local_dir: macOS/doc
  on:
    branch: master
    repo: open-eid/libdigidocpp
    condition: $TARGET = osx
- provider: s3
  access_key_id: ${AWS_ACCESS_KEY_ID}
  secret_access_key: ${AWS_SECRET_ACCESS_KEY}
  region: ${AWS_DEFAULT_REGION}
  bucket: open-eid
  local_dir: ../upload
  upload_dir: libdigidocpp-nightly/${BUILD_NUMBER}
  acl: public_read
  on:
    branch: master
    repo: open-eid/libdigidocpp
